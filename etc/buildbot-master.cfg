# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave('localhost', 'localhost'),
               BuildSlave('localhost2', 'localhost2')]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 'tcp:9989:interface=127.0.0.1'

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

# Using github web hooks
c['change_source'] = []


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes.filter import ChangeFilter

# All schedulers should set a filter based on specific repository
# names to prevent rogue change hooks from doing anything meaningful.
# A possible catch-all could be: repository_fn=coreos_fn
coreos_fn = lambda url: url.startswith('https://github.com/coreos/')

# Watch 'master' on these important repos:
coreos_master = ChangeFilter(
        branch='master',
        repository=[
            'https://github.com/coreos/manifest',
            'https://github.com/coreos/chromite',
            'https://github.com/coreos/scripts',
            'https://github.com/coreos/coreos-overlay',
            'https://github.com/coreos/portage-stable'])

# important change filter for master, marks changes that only impact
# branches as unimportant so duplicate builds are not triggered.
import re
_branch_files_re = re.compile(r'^build-\d+.xml$')
def manifest_master_fn(change):
    if (change.repository == 'https://github.com/coreos/manifest'
            and change.branch == 'master'):
        for changed_file in change.files:
            if _branch_files_re.match(changed_file):
                return False
            elif changed_file == 'version.txt':
                return False
    return True

# Build official releases when a 'track' gets updated:
coreos_dev_channel = ChangeFilter(
        branch='dev-channel',
        repository='https://github.com/coreos/manifest')

# Watch portage trees (master only for now) to mirror distfiles
coreos_overlay = ChangeFilter(
        branch='master',
        repository='https://github.com/coreos/coreos-overlay')
portage_stable = ChangeFilter(
        branch='master',
        repository='https://github.com/coreos/portage-stable')


# Now for the real meat...
c['schedulers'] = []
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_build_sdk_master',
            builderNames=['sdk_master', 'toolchains_master'],
            treeStableTimer=90,
            fileIsImportant=manifest_master_fn,
            change_filter=coreos_master))
c['schedulers'].append(
        Triggerable(
            name='trigger_build_packages_master',
            builderNames=['packages_master']))
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_build_sdk_dev_channel',
            builderNames=['sdk_dev_channel', 'toolchains_dev_channel'],
            treeStableTimer=30,
            change_filter=coreos_dev_channel))
c['schedulers'].append(
        Triggerable(
            name='trigger_build_packages_dev_channel',
            builderNames=['packages_dev_channel']))

# distfiles
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_distfiles_coreos',
            builderNames=['update_distfiles_coreos'],
            treeStableTimer=90,
            change_filter=coreos_overlay))
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_distfiles_portage_stable',
            builderNames=['update_distfiles_portage_stable'],
            treeStableTimer=90,
            change_filter=portage_stable))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Repo
from buildbot.steps.shell import ShellCommand
from buildbot.steps.trigger import Trigger

DEFAULT_MANIFEST = 'git://github.com/coreos/manifest.git'

def mknice(nice_value=None):
    if nice_value:
        return ['nice', '-n', str(int(nice_value))]
    else:
        return []

def update_chroot(
        manifest_url=DEFAULT_MANIFEST,
        manifest_branch='master',
        manifest_file='default.xml',
        boards=(),
        nice=None):
    bf = BuildFactory()
    bf.addStep(Repo(
            manifest_url=manifest_url,
            manifest_branch=manifest_branch,
            manifest_file=manifest_file))
    toolchain_args = []
    if boards:
        toolchain_args = ['--toolchain_boards', ' '.join(boards)]
    bf.addStep(ShellCommand(
            timeout=7200,
            haltOnFailure=True,
            description='update_chroot',
            command=mknice(nice) + [
                'chromite/bin/cros_sdk', '--',
                '/mnt/host/source/src/scripts/update_chroot']
                + toolchain_args))
    return bf

def build_board_packages(bf,
        manifest_url=DEFAULT_MANIFEST,
        manifest_branch='master',
        manifest_file='default.xml',
        board="amd64-generic",
        official=False,
        upload_branch=False,
        nice=None):
    official_var = 'COREOS_OFFICIAL=0'
    if official:
        official_var = 'COREOS_OFFICIAL=1'

    pkgver = 'current'
    if upload_branch:
        pkgver = manifest_branch

    bf.addStep(ShellCommand(
            timeout=7200,
            haltOnFailure=True,
            description='setup_board %s' % board,
            command=mknice(nice) + [
                'chromite/bin/cros_sdk', '--', official_var,
                '/mnt/host/source/src/scripts/setup_board',
                '--skip_chroot_upgrade',
                '--board', board,
                '--getbinpkgver', pkgver,
                '--toolchainpkgonly',
                '--nofast',
                '--force']))

    bf.addStep(ShellCommand(
            timeout=7200,
            haltOnFailure=True,
            description='build_packages %s' % board,
            command=mknice(nice) + [
                'chromite/bin/cros_sdk', '--', official_var,
                '/mnt/host/source/src/scripts/build_packages',
                '--skip_chroot_upgrade',
                '--board', board,
                '--getbinpkgver', pkgver,
                '--toolchainpkgonly',
                '--nofast']))

    upload_args = []
    if upload_branch:
        upload_args = ['--upload', '--upload_path',
                'gs://storage.core-os.net/coreos/%s/%s' %
                (board, manifest_branch)]

    bf.addStep(ShellCommand(
            timeout=7200,
            haltOnFailure=True,
            description='build_image %s' % board,
            command=mknice(nice) + [
                'chromite/bin/cros_sdk', '--', official_var,
                '/mnt/host/source/src/scripts/build_image',
                '--sign_digests', 'buildbot@coreos.com',
                '--board', board, 'prod', 'dev'] + upload_args))

    for vm in ('ami', 'vagrant', 'vagrant_vmware_fusion',
               'qemu', 'openstack', 'vmware_insecure', 'pxe',
               'rackspace', 'rackspace_vhd', 'gce', 'brightbox'):
        bf.addStep(ShellCommand(
                timeout=7200,
                haltOnFailure=False,
                description='image_to_vm %s %s' % (board, vm),
                command=mknice(nice) + [
                    'chromite/bin/cros_sdk', '--', official_var,
                    '/mnt/host/source/src/scripts/image_to_vm.sh',
                    '--sign_digests', 'buildbot@coreos.com',
                    '--prod_image', '--board', board, '--format', vm]
                    + upload_args))

    bf.addStep(ShellCommand(
            timeout=7200,
            haltOnFailure=False,
            description='prune_images',
            command=mknice(nice) + [
                'chromite/bin/cros_sdk', '--',
                '/mnt/host/source/src/scripts/prune_images']))
    return bf

def build_packages(
        manifest_url=DEFAULT_MANIFEST,
        manifest_branch='master',
        manifest_file='default.xml',
        official=False,
        upload_branch=False,
        nice=None):

    boards = ('amd64-generic', 'amd64-usr')

    bf = update_chroot(
            manifest_url=manifest_url,
            manifest_branch=manifest_branch,
            manifest_file=manifest_file,
            boards=boards,
            nice=nice)

    for board in boards:
        build_board_packages(bf,
            manifest_url=manifest_url,
            manifest_branch=manifest_branch,
            manifest_file=manifest_file,
            board=board,
            official=official,
            upload_branch=upload_branch,
            nice=nice)

    return bf

def catalyst(
        script,
        manifest_url=DEFAULT_MANIFEST,
        manifest_branch='master',
        manifest_file='default.xml',
        official=False,
        upload_branch=False,
        nice=None):
    bf = update_chroot(
            manifest_url=manifest_url,
            manifest_branch=manifest_branch,
            manifest_file=manifest_file,
            nice=nice)
    bf.addStep(ShellCommand(
            timeout=7200,
            haltOnFailure=True,
            description='emerge catalyst',
            command=mknice(nice) + [
                'chromite/bin/cros_sdk', '--', 'sudo', 'emerge',
                '-uv', '--select', '--jobs', '2', 'dev-util/catalyst']))

    official_var = 'COREOS_OFFICIAL=0'
    if official:
        official_var = 'COREOS_OFFICIAL=1'

    upload_args = []
    if upload_branch:
        upload_args = ['--version', manifest_branch, '--rebuild', '--upload']

    bf.addStep(ShellCommand(
            timeout=7200,
            haltOnFailure=True,
            description=script,
            command=mknice(nice) + [
                'chromite/bin/cros_sdk', '--', 'sudo', official_var,
                '/mnt/host/source/src/scripts/%s' % script] + upload_args))
    return bf

def bootstrap_sdk(
        manifest_url=DEFAULT_MANIFEST,
        manifest_branch='master',
        manifest_file='default.xml',
        official=False,
        upload_branch=False,
        nice=None):
    return catalyst('bootstrap_sdk',
            manifest_url=manifest_url,
            manifest_branch=manifest_branch,
            manifest_file=manifest_file,
            official=official,
            upload_branch=upload_branch,
            nice=nice)

def build_toolchains(
        manifest_url=DEFAULT_MANIFEST,
        manifest_branch='master',
        manifest_file='default.xml',
        official=False,
        upload_branch=False,
        nice=None):
    bf = catalyst('build_toolchains',
            manifest_url=manifest_url,
            manifest_branch=manifest_branch,
            manifest_file=manifest_file,
            official=official,
            upload_branch=upload_branch,
            nice=nice)

    # branches may have - but scheduler names use _
    pkgs = 'trigger_build_packages_%s' % manifest_branch.replace('-', '_')
    # alwaysUseLatest is true because doesn't support not using the latest
    bf.addStep(Trigger(
        schedulerNames=[pkgs],
        waitForFinish=False,
        alwaysUseLatest=True))

    return bf

# Normally builds are merged if the change came from the same
# repository, branch, etc. Since repo wraps all that up always merge.
def alwaysMerge(builder, req1, req2):
    return True

c['builders'] = []

c['builders'].append(BuilderConfig(
        name='sdk_master',
        slavenames=['localhost2'],
        mergeRequests=alwaysMerge,
        factory=bootstrap_sdk(nice=10)))

c['builders'].append(BuilderConfig(
        name='toolchains_master',
        slavenames=['localhost2'],
        mergeRequests=alwaysMerge,
        factory=build_toolchains(upload_branch=True,
                                 nice=10)))

c['builders'].append(BuilderConfig(
        name='sdk_dev_channel',
        slavenames=['localhost'],
        mergeRequests=alwaysMerge,
        factory=bootstrap_sdk(manifest_branch='dev-channel',
                              manifest_file='release.xml',
                              official=True)))

c['builders'].append(BuilderConfig(
        name='toolchains_dev_channel',
        slavenames=['localhost'],
        mergeRequests=alwaysMerge,
        factory=build_toolchains(manifest_branch='dev-channel',
                                 manifest_file='release.xml',
                                 official=True)))

c['builders'].append(BuilderConfig(
        name='packages_master',
        slavenames=['localhost2'],
        mergeRequests=alwaysMerge,
        factory=build_packages(upload_branch=True,
                               nice=10)))

c['builders'].append(BuilderConfig(
        name='packages_dev_channel',
        slavenames=['localhost'],
        mergeRequests=alwaysMerge,
        factory=build_packages(manifest_branch='dev-channel',
                               manifest_file='release.xml',
                               official=True)))

update_distfiles_coreos = update_chroot()
update_distfiles_coreos.addStep(ShellCommand(
        timeout=7200,
        haltOnFailure=True,
        description='update_distfiles',
        command=mknice(5) + [
            'chromite/bin/cros_sdk', '--',
            '/mnt/host/source/src/scripts/update_distfiles',
            '--download', '--upload', 'coreos']))

c['builders'].append(
        BuilderConfig(name='update_distfiles_coreos',
            slavenames=['localhost2'],
            mergeRequests=alwaysMerge,
            factory=update_distfiles_coreos))

update_distfiles_portage_stable = update_chroot()
update_distfiles_portage_stable.addStep(ShellCommand(
        timeout=7200,
        haltOnFailure=True,
        description='update_distfiles',
        command=mknice(5) + [
            'chromite/bin/cros_sdk', '--',
            '/mnt/host/source/src/scripts/update_distfiles',
            '--download', '--upload', 'portage-stable']))

c['builders'].append(
        BuilderConfig(name='update_distfiles_portage_stable',
            slavenames=['localhost2'],
            mergeRequests=alwaysMerge,
            factory=update_distfiles_portage_stable))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(
	html.WebStatus(
	    http_port='tcp:8081:interface=127.0.0.1',
	    change_hook_dialects={'github': True}))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'CoreOS'
c['titleURL'] = 'http://dev.coreos.com/'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = 'http://localhost:8010/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}

