# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave('localhost', 'localhost')]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 'tcp:9989:interface=127.0.0.1'

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

# Using github web hooks
c['change_source'] = []


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter

# All schedulers should set a filter based on specific repository
# names to prevent rogue change hooks from doing anything meaningful.
# A possible catch-all could be: repository_fn=coreos_fn
coreos_fn = lambda url: url.startswith('https://github.com/coreos/')

# Watch 'master' on these important repos:
coreos_master = ChangeFilter(
        branch='master',
        repository=[
            'https://github.com/coreos/manifest',
            'https://github.com/coreos/chromite',
            'https://github.com/coreos/scripts',
            'https://github.com/coreos/coreos-overlay',
            'https://github.com/coreos/portage-stable'])

# Build official releases when a 'track' gets updated:
coreos_dev_channel = ChangeFilter(
        branch='dev-channel',
        repository='https://github.com/coreos/manifest')

# Watch portage trees (master only for now) to mirror distfiles
coreos_overlay = ChangeFilter(
        branch='master',
        repository='https://github.com/coreos/coreos-overlay')
portage_stable = ChangeFilter(
        branch='master',
        repository='https://github.com/coreos/portage-stable')


# Now for the real meat...
c['schedulers'] = []
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_build_master',
            builderNames=['sdk_master', 'packages_master'],
            change_filter=coreos_master))
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_build_dev_channel',
            builderNames=['sdk_dev_channel', 'packages_dev_channel'],
            change_filter=coreos_dev_channel))

# distfiles
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_distfiles_coreos',
            builderNames=['update_distfiles_coreos'],
            change_filter=coreos_overlay))
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_distfiles_portage_stable',
            builderNames=['update_distfiles_portage_stable'],
            change_filter=portage_stable))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Repo
from buildbot.steps.shell import ShellCommand

DEFAULT_MANIFEST = 'git://github.com/coreos/manifest.git'

def build_packages(
        manifest_url=DEFAULT_MANIFEST,
        manifest_branch='master',
        manifest_file='default.xml',
        board="amd64-generic",
        official=False):
    bf = BuildFactory()
    bf.addStep(Repo(
            manifest_url=manifest_url,
            manifest_branch=manifest_branch,
            manifest_file=manifest_file))

    official_var = 'COREOS_OFFICIAL=0'
    if official:
        official_var = 'COREOS_OFFICIAL=1'

    bf.addStep(ShellCommand(
            timeout=7200,
            description='build_packages',
            command=[
                'chromite/bin/cros_sdk', '--', official_var,
                '/mnt/host/source/src/scripts/build_packages',
                '--board', board]))
    return bf

def update_chroot(
        manifest_url=DEFAULT_MANIFEST,
        manifest_branch='master',
        manifest_file='default.xml'):
    bf = BuildFactory()
    bf.addStep(Repo(
            manifest_url=manifest_url,
            manifest_branch=manifest_branch,
            manifest_file=manifest_file))
    bf.addStep(ShellCommand(
            timeout=7200,
            description='update_chroot',
            command=[
                'chromite/bin/cros_sdk', '--',
                '/mnt/host/source/src/scripts/update_chroot']))
    return bf

def bootstrap_sdk(
        manifest_url=DEFAULT_MANIFEST,
        manifest_branch='master',
        manifest_file='default.xml',
        official=False):
    bf = update_chroot(
            manifest_url=manifest_url,
            manifest_branch=manifest_branch,
            manifest_file=manifest_file)
    bf.addStep(ShellCommand(
            timeout=7200,
            description='emerge catalyst',
            command=[
                'chromite/bin/cros_sdk', '--', 'sudo', 'emerge',
                '-uv', '--select', '--jobs', '2', 'dev-util/catalyst']))

    official_var = 'COREOS_OFFICIAL=0'
    if official:
        official_var = 'COREOS_OFFICIAL=1'

    bf.addStep(ShellCommand(
            timeout=7200,
            description='bootstrap_sdk',
            command=[
                'chromite/bin/cros_sdk', '--', 'sudo', official_var,
                '/mnt/host/source/src/scripts/bootstrap_sdk']))
    return bf


c['builders'] = []

c['builders'].append(BuilderConfig(
        name='sdk_master',
        slavenames=['localhost'],
        factory=bootstrap_sdk()))

c['builders'].append(BuilderConfig(
        name='sdk_dev_channel',
        slavenames=['localhost'],
        factory=bootstrap_sdk(manifest_branch='dev-channel', official=True)))

c['builders'].append(BuilderConfig(
        name='packages_master',
        slavenames=['localhost'],
        factory=build_packages()))

c['builders'].append(BuilderConfig(
        name='packages_dev_channel',
        slavenames=['localhost'],
        factory=build_packages(manifest_branch='dev-channel', official=True)))

update_distfiles_coreos = update_chroot()
update_distfiles_coreos.addStep(ShellCommand(
        timeout=7200,
        description='update_distfiles',
        command=[
            'chromite/bin/cros_sdk', '--',
            '/mnt/host/source/src/scripts/update_distfiles',
            '--download', '--upload', 'coreos']))

c['builders'].append(
        BuilderConfig(name='update_distfiles_coreos',
            slavenames=['localhost'],
            factory=update_distfiles_coreos))

update_distfiles_portage_stable = update_chroot()
update_distfiles_portage_stable.addStep(ShellCommand(
        timeout=7200,
        description='update_distfiles',
        command=[
            'chromite/bin/cros_sdk', '--',
            '/mnt/host/source/src/scripts/update_distfiles',
            '--download', '--upload', 'portage-stable']))

c['builders'].append(
        BuilderConfig(name='update_distfiles_portage_stable',
            slavenames=['localhost'],
            factory=update_distfiles_portage_stable))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(
	html.WebStatus(
	    http_port='tcp:8081:interface=127.0.0.1',
	    change_hook_dialects={'github': True}))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'CoreOS'
c['titleURL'] = 'http://dev.coreos.com/'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = 'http://localhost:8010/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}

