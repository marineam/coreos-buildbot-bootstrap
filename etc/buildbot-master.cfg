# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave('localhost', 'localhost')]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 'tcp:9989:interface=127.0.0.1'

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

def coreos_project(project, branch='master'):
    repourl = 'git://github.com/%s.git' % (project,)
    c['change_source'].append(
            GitPoller(repourl,
                      project=project,
                      category='github',
                      branches=[branch],
                      pollinterval=300))

coreos_project('marineam/manifest', 'buildbot')
coreos_project('coreos/chromite')
coreos_project('coreos/scripts')
coreos_project('coreos/coreos-overlay')
coreos_project('coreos/portage-stable')


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter

c['schedulers'] = []
c['schedulers'].append(
        AnyBranchScheduler(
            name='full_builds',
            builderNames=['bootstrap_sdk']))
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_distfiles_coreos',
            builderNames=['update_distfiles_coreos'],
            change_filter=ChangeFilter(
                project='coreos/coreos-overlay', branch='master')))
c['schedulers'].append(
        SingleBranchScheduler(
            name='trigger_distfiles_portage_stable',
            builderNames=['update_distfiles_portage_stable'],
            change_filter=ChangeFilter(
                project='coreos/portage-stable', branch='master')))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Repo
from buildbot.steps.shell import ShellCommand

c['builders'] = []

bootstrap_sdk = BuildFactory()
bootstrap_sdk.addStep(
        Repo(manifest_url='https://github.com/marineam/coreos-manifest.git',
             manifest_branch='buildbot', manifest_file='buildbot.xml'))
bootstrap_sdk.addStep(
        ShellCommand(timeout=7200, command=[
            'chromite/bin/cros_sdk', '--',
            '/mnt/host/source/src/scripts/update_chroot']))
bootstrap_sdk.addStep(
        ShellCommand(timeout=7200, command=[
            'chromite/bin/cros_sdk', '--', 'sudo', 'emerge',
            '-uv', '--select', '--jobs', '2', 'dev-util/catalyst']))
bootstrap_sdk.addStep(
        ShellCommand(timeout=7200, command=[
            'chromite/bin/cros_sdk', '--', 'sudo',
            '/mnt/host/source/src/scripts/bootstrap_sdk', '--upload']))

c['builders'].append(
        BuilderConfig(name='bootstrap_sdk',
            slavenames=['localhost'],
            factory=bootstrap_sdk))

update_distfiles_coreos = BuildFactory()
bootstrap_sdk.addStep(
        Repo(manifest_url='https://github.com/marineam/coreos-manifest.git',
             manifest_branch='buildbot', manifest_file='buildbot.xml'))
update_distfiles_coreos.addStep(
        ShellCommand(timeout=7200, command=[
            'chromite/bin/cros_sdk', '--',
            '/mnt/host/source/src/scripts/update_chroot']))
update_distfiles_coreos.addStep(
        ShellCommand(timeout=7200, command=[
            'chromite/bin/cros_sdk', '--',
            '/mnt/host/source/src/scripts/update_distfiles',
            '--download', '--upload', 'coreos']))

c['builders'].append(
        BuilderConfig(name='update_distfiles_coreos',
            slavenames=['localhost'],
            factory=update_distfiles_coreos))

update_distfiles_portage_stable = BuildFactory()
bootstrap_sdk.addStep(
        Repo(manifest_url='https://github.com/marineam/coreos-manifest.git',
             manifest_branch='buildbot', manifest_file='buildbot.xml'))
update_distfiles_portage_stable.addStep(
        ShellCommand(timeout=7200, command=[
            'chromite/bin/cros_sdk', '--',
            '/mnt/host/source/src/scripts/update_chroot']))
update_distfiles_portage_stable.addStep(
        ShellCommand(timeout=7200, command=[
            'chromite/bin/cros_sdk', '--',
            '/mnt/host/source/src/scripts/update_distfiles',
            '--download', '--upload', 'portage-stable']))

c['builders'].append(
        BuilderConfig(name='update_distfiles_portage_stable',
            slavenames=['localhost'],
            factory=update_distfiles_portage_stable))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port='tcp:8081:interface=127.0.0.1'))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'CoreOS'
c['titleURL'] = 'http://dev.coreos.com/'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = 'http://localhost:8010/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
